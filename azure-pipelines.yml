name: Azure Pipelines

stages:
  - stage: "Provisioning"
    jobs:
      - job: provision_infrastructure
        displayName: "Provision Infrastructure"
        pool: myAgentPool
        steps:
          - task: DownloadSecureFile@1
            displayName: "Download terraform.tfvars file"
            name: tfvars
            inputs:
              secureFile: "terraform.tfvars"

          - task: Bash@3
            displayName: "Copy terraform.tfvars file"
            inputs:
              targetType: "inline"
              script: |
                #!/bin/bash
                sudo cp $(tfvars.secureFilePath) terraform/environments/test/terraform.tfvars

          - task: TerraformInstaller@0
            displayName: "Install Terraform"
            inputs:
              terraformVersion: '0.14.11'

          - task: TerraformTaskV1@0
            displayName: "Terraform Init"
            inputs:
              provider: "azurerm"
              command: "init"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test/"
              backendServiceArm: "myServiceConnection"
              backendAzureRmResourceGroupName: "Azuredevops"
              backendAzureRmStorageAccountName: "tstate32321"
              backendAzureRmContainerName: "tstate"
              backendAzureRmKey: "Pc10RPa998vIJumf+68BAI23OvIUtf805lTx5RfUXmWE1vYwi4DwSVjavrK1JMmnekBa3jjAJetO+AStWA66EA=="

          - task: TerraformTaskV1@0
            displayName: "Terraform Validate"
            inputs:
              provider: "azurerm"
              command: "validate"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test/"

          - task: TerraformTaskV1@0
            displayName: "Terraform Plan"
            inputs:
              provider: "azurerm"
              command: "plan"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test/"
              environmentServiceNameAzureRM: "myServiceConnection"

          - task: TerraformTaskV1@0
            displayName: "Terraform Apply"
            inputs:
              provider: "azurerm"
              command: "apply"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test/"
              commandOptions: "-auto-approve"
              environmentServiceNameAzureRM: "myServiceConnection"

  - stage: "Build"
    jobs:
      - job: build_artifacts
        displayName: "Build Artifacts"
        pool: myAgentPool
        steps:
          - task: ArchiveFiles@2
            displayName: "Archive FakeRestAPI"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/fakerestapi"
              #rootFolderOrFile: "(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip"
              verbose: true

          - task: PublishPipelineArtifact@1
            displayName: "Publish FakeRestAPI"
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip"
              #targetPath: $(System.DefaultWorkingDirectory)/fakerestapi
              artifactName: "fakerestapi"

          - task: ArchiveFiles@2
            displayName: "Archive Selenium"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/selenium"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip"
              verbose: true

          - task: PublishPipelineArtifact@1
            displayName: "Publish Selenium"
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip"
              artifactName: "drop-selenium"

  - stage: "Deploy"
    jobs:
      - deployment: deploy_fakerestapi
        displayName: "Deploy FakeRestAPI"
        pool: myAgentPool
          # vmImage: "ubuntu-18.04"
        environment: "Test"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: "Deploy Azure WebApp"
                  inputs:
                    azureSubscription: "myServiceConnection"
                    appType: webApp #"webAppLinux"
                    appName: "Web-App-Project-3"
                    package: "$(Pipeline.Workspace)/fakerestapi/fakerestapi-$(Build.BuildId).zip"
                    deploymentMethod: "auto"

      - deployment: deploy_vm
        displayName: "Deploy VM"
        environment:
          name: "Test"
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Bash@3
                  displayName: "Configure Selenium"
                  inputs:
                    targetType: "inline"
                    script: |
                      #!/bin/bash
                      export LC_ALL=C
                      sudo apt-get install -y software-properties-common
                      sudo apt-add-repository -y universe
                      sudo apt-add-repository -y ppa:deadsnakes/ppa
                      sudo apt-get -y update
                      sudo apt-get install -y python3.8 python3.8-distutils python3-pip unzip chromium-browser chromium-chromedriver
                      sudo rm /usr/bin/python3
                      sudo ln -s /usr/bin/python3.8 /usr/bin/python3
                      sudo apt remove -y python3-pip
                      curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
                      sudo python3 get-pip.py
                      sudo pip3 install --upgrade pip
                      sudo pip3 install selenium

  - stage: Test
      job: TestNewman
        displayName: Test Postman with Newman CLI
        pool: myAgentPool 
        steps: 
        - task: NodeTool@0
          displayName: Install Node v12.X
          inputs:
            versionSpec: '12.x'
        - bash: |
            npm install -g newman
            mkdir -p log/newman
          displayName: Install Newman CLI
        - bash: |
            newman run automatedtesting/postman/regressionTestUdacity.postman_collection.json \
                       -e automatedtesting/postman/testingenvironment.postman_environment.json \
                       --reporters cli,junit \
                       --reporter-junit-export log/newman/regressionTestUdacity.xml \
                       --suppress-exit-code
          displayName: Run Regression Test
        - bash: |
            newman run automatedtesting/postman/validationTestUdacity.postman_collection.json \
                       -e automatedtesting/postman/testingenvironment.postman_environment.json \
                       --reporters cli,junit \
                       --reporter-junit-export log/newman/validationTestUdacity.xml \
                       --suppress-exit-code
          displayName: Run Validation Test
        - task: PublishPipelineArtifact@1
          displayName: Publish Newman logs
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/log/newman'
            artifactName: 'drop-newman-logs'
        - task: PublishTestResults@2
          displayName: 'Publish Postman Test Results'
          inputs:
            testRunner: 'JUnit'
            searchFolder: '$(System.DefaultWorkingDirectory)/log/newman'
            testResultsFiles: '*.xml'
            mergeTestResults: true
            testRunTitle: 'Postman Test Results'
