name: Azure Pipelines

stages:
  - stage: "Provisioning"
    jobs:
      - job: provision_infrastructure
        displayName: "Provision infrastructure"
        pool: myAgentPool
          #vmimage: ubuntu-18.04
        steps:
          - task: DownloadSecureFile@1
            displayName: "Download terraform.tfvars file"
            name: tfvars
            inputs:
              secureFile: "terraform.tfvars"

          - task: Bash@3
            displayName: "Copy terraform.tfvars file"
            inputs:
              targetType: "inline"
              script: |
                #!/bin/bash
                sudo cp $(tfvars.secureFilePath) terraform/environments/test/terraform.tfvars

          - task: TerraformInstaller@0
            displayName: "Install Terraform"
            inputs:
              terraformVersion: '0.14.11'

          - task: TerraformTaskV1@0
            displayName: "Terraform init"
            inputs:
              provider: "azurerm"
              command: "init"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test/"
              backendServiceArm: "myServiceConnection"
              backendAzureRmResourceGroupName: "Azuredevops"
              backendAzureRmStorageAccountName: "tstate18991"
              backendAzureRmContainerName: "tstate"
              backendAzureRmKey: "Y7J7sNQzpPyMYb0m2yLjOeo/BY6ALZ2od/puU45yp5P5W87pmHH8vyZhVWHSpezFS/DwhRWBCbeG+AStxe/XEg=="

          - task: TerraformTaskV1@0
            displayName: "Terraform validate"
            inputs:
              provider: "azurerm"
              command: "validate"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test/"

          - task: TerraformTaskV1@0
            displayName: "Terraform plan"
            inputs:
              provider: "azurerm"
              command: "plan"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test/"
              environmentServiceNameAzureRM: "myServiceConnection"

          - task: TerraformTaskV1@0
            displayName: "Terraform apply"
            inputs:
              provider: "azurerm"
              command: "apply"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test/"
              commandOptions: "-auto-approve"
              environmentServiceNameAzureRM: "myServiceConnection"

  - stage: "Build"
    jobs:
      - job: build_artifacts
        displayName: "Build artifacts"
        pool: myAgentPool
          #vmImage: "ubuntu-18.04"
        steps:
          - task: ArchiveFiles@2
            displayName: "Archive FakeRestAPI"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/fakerestapi"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip"
              verbose: true

          - task: PublishPipelineArtifact@1
            displayName: "Publish FakeRestAPI"
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip"
              artifactName: "fakerestapi"

          - task: ArchiveFiles@2
            displayName: "Archive Selenium"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/selenium"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip"
              verbose: true

          - task: PublishPipelineArtifact@1
            displayName: "Publish Selenium"
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip"
              artifactName: "selenium"

  - stage: "Deploy"
    jobs:
      - deployment: deploy_fakerestapi
        displayName: "Deploy FakeRestAPI"
        pool: myAgentPool
          # vmImage: "ubuntu-18.04"
        environment: "Test Linux"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: "Deploy Azure WebApp"
                  inputs:
                    azureSubscription: "myServiceConnection"
                    appType: "webAppLinux"
                    appName: "myApplication-AppService-AS" 
                    #"Web-App-Project-3"
                    package: "$(Pipeline.Workspace)/fakerestapi/fakerestapi-$(Build.BuildId).zip"
                    deploymentMethod: "auto"

      - deployment: deploy_vm
        displayName: "Deploy VM"
        environment:
          name: "Test Linux"
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Bash@3
                  displayName: "Configure Selenium"
                  inputs:
                    targetType: "inline"
                    script: |
                      #!/bin/bash
                      export LC_ALL=C
                      sudo apt-get install -y software-properties-common
                      sudo apt-add-repository -y universe
                      sudo apt-add-repository -y ppa:deadsnakes/ppa
                      sudo apt-get -y update
                      sudo apt-get install -y python3.8 python3.8-distutils python3-pip unzip chromium-browser chromium-chromedriver
                      sudo rm /usr/bin/python3
                      sudo ln -s /usr/bin/python3.8 /usr/bin/python3
                      sudo apt remove -y python3-pip
                      curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
                      sudo python3 get-pip.py
                      sudo pip3 install --upgrade pip
                      sudo pip3 install selenium
